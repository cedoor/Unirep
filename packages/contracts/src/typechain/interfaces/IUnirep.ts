/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type {
    FunctionFragment,
    Result,
    EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue,
} from '../common'

export declare namespace UnirepTypes {
    export type AttestationStruct = {
        attesterId: PromiseOrValue<BigNumberish>
        posRep: PromiseOrValue<BigNumberish>
        negRep: PromiseOrValue<BigNumberish>
        graffiti: PromiseOrValue<BigNumberish>
        signUp: PromiseOrValue<BigNumberish>
    }

    export type AttestationStructOutput = [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        attesterId: BigNumber
        posRep: BigNumber
        negRep: BigNumber
        graffiti: BigNumber
        signUp: BigNumber
    }

    export type EpochKeyProofStruct = {
        globalStateTree: PromiseOrValue<BigNumberish>
        epoch: PromiseOrValue<BigNumberish>
        epochKey: PromiseOrValue<BigNumberish>
        proof: PromiseOrValue<BigNumberish>[]
    }

    export type EpochKeyProofStructOutput = [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
    ] & {
        globalStateTree: BigNumber
        epoch: BigNumber
        epochKey: BigNumber
        proof: BigNumber[]
    }

    export type ReputationProofStruct = {
        repNullifiers: PromiseOrValue<BigNumberish>[]
        epoch: PromiseOrValue<BigNumberish>
        epochKey: PromiseOrValue<BigNumberish>
        globalStateTree: PromiseOrValue<BigNumberish>
        attesterId: PromiseOrValue<BigNumberish>
        proveReputationAmount: PromiseOrValue<BigNumberish>
        minRep: PromiseOrValue<BigNumberish>
        proveGraffiti: PromiseOrValue<BigNumberish>
        graffitiPreImage: PromiseOrValue<BigNumberish>
        proof: PromiseOrValue<BigNumberish>[]
    }

    export type ReputationProofStructOutput = [
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
    ] & {
        repNullifiers: BigNumber[]
        epoch: BigNumber
        epochKey: BigNumber
        globalStateTree: BigNumber
        attesterId: BigNumber
        proveReputationAmount: BigNumber
        minRep: BigNumber
        proveGraffiti: BigNumber
        graffitiPreImage: BigNumber
        proof: BigNumber[]
    }

    export type SignUpProofStruct = {
        epoch: PromiseOrValue<BigNumberish>
        epochKey: PromiseOrValue<BigNumberish>
        globalStateTree: PromiseOrValue<BigNumberish>
        attesterId: PromiseOrValue<BigNumberish>
        userHasSignedUp: PromiseOrValue<BigNumberish>
        proof: PromiseOrValue<BigNumberish>[]
    }

    export type SignUpProofStructOutput = [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
    ] & {
        epoch: BigNumber
        epochKey: BigNumber
        globalStateTree: BigNumber
        attesterId: BigNumber
        userHasSignedUp: BigNumber
        proof: BigNumber[]
    }

    export type UserTransitionProofStruct = {
        newGlobalStateTreeLeaf: PromiseOrValue<BigNumberish>
        epkNullifiers: PromiseOrValue<BigNumberish>[]
        transitionFromEpoch: PromiseOrValue<BigNumberish>
        blindedUserStates: PromiseOrValue<BigNumberish>[]
        fromGlobalStateTree: PromiseOrValue<BigNumberish>
        blindedHashChains: PromiseOrValue<BigNumberish>[]
        fromEpochTree: PromiseOrValue<BigNumberish>
        proof: PromiseOrValue<BigNumberish>[]
    }

    export type UserTransitionProofStructOutput = [
        BigNumber,
        BigNumber[],
        BigNumber,
        BigNumber[],
        BigNumber,
        BigNumber[],
        BigNumber,
        BigNumber[]
    ] & {
        newGlobalStateTreeLeaf: BigNumber
        epkNullifiers: BigNumber[]
        transitionFromEpoch: BigNumber
        blindedUserStates: BigNumber[]
        fromGlobalStateTree: BigNumber
        blindedHashChains: BigNumber[]
        fromEpochTree: BigNumber
        proof: BigNumber[]
    }
}

export interface IUnirepInterface extends utils.Interface {
    functions: {
        'attesterSignUp()': FunctionFragment
        'attesterSignUpViaRelayer(address,bytes)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic: 'attesterSignUp' | 'attesterSignUpViaRelayer'
    ): FunctionFragment

    encodeFunctionData(
        functionFragment: 'attesterSignUp',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'attesterSignUpViaRelayer',
        values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
    ): string

    decodeFunctionResult(
        functionFragment: 'attesterSignUp',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'attesterSignUpViaRelayer',
        data: BytesLike
    ): Result

    events: {
        'AttestationSubmitted(uint256,uint256,address,uint8,tuple,uint256,uint256)': EventFragment
        'EpochEnded(uint256)': EventFragment
        'IndexedEpochKeyProof(uint256,uint256,uint256,tuple)': EventFragment
        'IndexedProcessedAttestationsProof(uint256,uint256,uint256,uint256,uint256[8])': EventFragment
        'IndexedReputationProof(uint256,uint256,uint256,tuple)': EventFragment
        'IndexedStartedTransitionProof(uint256,uint256,uint256,uint256,uint256[8])': EventFragment
        'IndexedUserSignedUpProof(uint256,uint256,uint256,tuple)': EventFragment
        'IndexedUserStateTransitionProof(uint256,tuple,uint256[])': EventFragment
        'Sequencer(uint256,uint8)': EventFragment
        'UserSignedUp(uint256,uint256,uint256,uint256)': EventFragment
        'UserStateTransitioned(uint256,uint256,uint256)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'AttestationSubmitted'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'EpochEnded'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'IndexedEpochKeyProof'): EventFragment
    getEvent(
        nameOrSignatureOrTopic: 'IndexedProcessedAttestationsProof'
    ): EventFragment
    getEvent(nameOrSignatureOrTopic: 'IndexedReputationProof'): EventFragment
    getEvent(
        nameOrSignatureOrTopic: 'IndexedStartedTransitionProof'
    ): EventFragment
    getEvent(nameOrSignatureOrTopic: 'IndexedUserSignedUpProof'): EventFragment
    getEvent(
        nameOrSignatureOrTopic: 'IndexedUserStateTransitionProof'
    ): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Sequencer'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'UserSignedUp'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'UserStateTransitioned'): EventFragment
}

export interface AttestationSubmittedEventObject {
    epoch: BigNumber
    epochKey: BigNumber
    attester: string
    attestationEvent: number
    attestation: UnirepTypes.AttestationStructOutput
    toProofIndex: BigNumber
    fromProofIndex: BigNumber
}
export type AttestationSubmittedEvent = TypedEvent<
    [
        BigNumber,
        BigNumber,
        string,
        number,
        UnirepTypes.AttestationStructOutput,
        BigNumber,
        BigNumber
    ],
    AttestationSubmittedEventObject
>

export type AttestationSubmittedEventFilter =
    TypedEventFilter<AttestationSubmittedEvent>

export interface EpochEndedEventObject {
    epoch: BigNumber
}
export type EpochEndedEvent = TypedEvent<[BigNumber], EpochEndedEventObject>

export type EpochEndedEventFilter = TypedEventFilter<EpochEndedEvent>

export interface IndexedEpochKeyProofEventObject {
    proofIndex: BigNumber
    epoch: BigNumber
    epochKey: BigNumber
    proof: UnirepTypes.EpochKeyProofStructOutput
}
export type IndexedEpochKeyProofEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, UnirepTypes.EpochKeyProofStructOutput],
    IndexedEpochKeyProofEventObject
>

export type IndexedEpochKeyProofEventFilter =
    TypedEventFilter<IndexedEpochKeyProofEvent>

export interface IndexedProcessedAttestationsProofEventObject {
    proofIndex: BigNumber
    inputBlindedUserState: BigNumber
    outputBlindedUserState: BigNumber
    outputBlindedHashChain: BigNumber
    proof: BigNumber[]
}
export type IndexedProcessedAttestationsProofEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber[]],
    IndexedProcessedAttestationsProofEventObject
>

export type IndexedProcessedAttestationsProofEventFilter =
    TypedEventFilter<IndexedProcessedAttestationsProofEvent>

export interface IndexedReputationProofEventObject {
    proofIndex: BigNumber
    epoch: BigNumber
    epochKey: BigNumber
    proof: UnirepTypes.ReputationProofStructOutput
}
export type IndexedReputationProofEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, UnirepTypes.ReputationProofStructOutput],
    IndexedReputationProofEventObject
>

export type IndexedReputationProofEventFilter =
    TypedEventFilter<IndexedReputationProofEvent>

export interface IndexedStartedTransitionProofEventObject {
    proofIndex: BigNumber
    blindedUserState: BigNumber
    globalStateTree: BigNumber
    blindedHashChain: BigNumber
    proof: BigNumber[]
}
export type IndexedStartedTransitionProofEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber[]],
    IndexedStartedTransitionProofEventObject
>

export type IndexedStartedTransitionProofEventFilter =
    TypedEventFilter<IndexedStartedTransitionProofEvent>

export interface IndexedUserSignedUpProofEventObject {
    proofIndex: BigNumber
    epoch: BigNumber
    epochKey: BigNumber
    proof: UnirepTypes.SignUpProofStructOutput
}
export type IndexedUserSignedUpProofEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, UnirepTypes.SignUpProofStructOutput],
    IndexedUserSignedUpProofEventObject
>

export type IndexedUserSignedUpProofEventFilter =
    TypedEventFilter<IndexedUserSignedUpProofEvent>

export interface IndexedUserStateTransitionProofEventObject {
    proofIndex: BigNumber
    proof: UnirepTypes.UserTransitionProofStructOutput
    proofIndexRecords: BigNumber[]
}
export type IndexedUserStateTransitionProofEvent = TypedEvent<
    [BigNumber, UnirepTypes.UserTransitionProofStructOutput, BigNumber[]],
    IndexedUserStateTransitionProofEventObject
>

export type IndexedUserStateTransitionProofEventFilter =
    TypedEventFilter<IndexedUserStateTransitionProofEvent>

export interface SequencerEventObject {
    epoch: BigNumber
    userEvent: number
}
export type SequencerEvent = TypedEvent<
    [BigNumber, number],
    SequencerEventObject
>

export type SequencerEventFilter = TypedEventFilter<SequencerEvent>

export interface UserSignedUpEventObject {
    epoch: BigNumber
    identityCommitment: BigNumber
    attesterId: BigNumber
    airdropAmount: BigNumber
}
export type UserSignedUpEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, BigNumber],
    UserSignedUpEventObject
>

export type UserSignedUpEventFilter = TypedEventFilter<UserSignedUpEvent>

export interface UserStateTransitionedEventObject {
    epoch: BigNumber
    hashedLeaf: BigNumber
    proofIndex: BigNumber
}
export type UserStateTransitionedEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber],
    UserStateTransitionedEventObject
>

export type UserStateTransitionedEventFilter =
    TypedEventFilter<UserStateTransitionedEvent>

export interface IUnirep extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: IUnirepInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        attesterSignUp(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        attesterSignUpViaRelayer(
            attester: PromiseOrValue<string>,
            signature: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    attesterSignUp(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    attesterSignUpViaRelayer(
        attester: PromiseOrValue<string>,
        signature: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        attesterSignUp(overrides?: CallOverrides): Promise<void>

        attesterSignUpViaRelayer(
            attester: PromiseOrValue<string>,
            signature: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {
        'AttestationSubmitted(uint256,uint256,address,uint8,tuple,uint256,uint256)'(
            epoch?: PromiseOrValue<BigNumberish> | null,
            epochKey?: PromiseOrValue<BigNumberish> | null,
            attester?: PromiseOrValue<string> | null,
            attestationEvent?: null,
            attestation?: null,
            toProofIndex?: null,
            fromProofIndex?: null
        ): AttestationSubmittedEventFilter
        AttestationSubmitted(
            epoch?: PromiseOrValue<BigNumberish> | null,
            epochKey?: PromiseOrValue<BigNumberish> | null,
            attester?: PromiseOrValue<string> | null,
            attestationEvent?: null,
            attestation?: null,
            toProofIndex?: null,
            fromProofIndex?: null
        ): AttestationSubmittedEventFilter

        'EpochEnded(uint256)'(
            epoch?: PromiseOrValue<BigNumberish> | null
        ): EpochEndedEventFilter
        EpochEnded(
            epoch?: PromiseOrValue<BigNumberish> | null
        ): EpochEndedEventFilter

        'IndexedEpochKeyProof(uint256,uint256,uint256,tuple)'(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            epoch?: PromiseOrValue<BigNumberish> | null,
            epochKey?: PromiseOrValue<BigNumberish> | null,
            proof?: null
        ): IndexedEpochKeyProofEventFilter
        IndexedEpochKeyProof(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            epoch?: PromiseOrValue<BigNumberish> | null,
            epochKey?: PromiseOrValue<BigNumberish> | null,
            proof?: null
        ): IndexedEpochKeyProofEventFilter

        'IndexedProcessedAttestationsProof(uint256,uint256,uint256,uint256,uint256[8])'(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            inputBlindedUserState?: PromiseOrValue<BigNumberish> | null,
            outputBlindedUserState?: null,
            outputBlindedHashChain?: null,
            proof?: null
        ): IndexedProcessedAttestationsProofEventFilter
        IndexedProcessedAttestationsProof(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            inputBlindedUserState?: PromiseOrValue<BigNumberish> | null,
            outputBlindedUserState?: null,
            outputBlindedHashChain?: null,
            proof?: null
        ): IndexedProcessedAttestationsProofEventFilter

        'IndexedReputationProof(uint256,uint256,uint256,tuple)'(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            epoch?: PromiseOrValue<BigNumberish> | null,
            epochKey?: PromiseOrValue<BigNumberish> | null,
            proof?: null
        ): IndexedReputationProofEventFilter
        IndexedReputationProof(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            epoch?: PromiseOrValue<BigNumberish> | null,
            epochKey?: PromiseOrValue<BigNumberish> | null,
            proof?: null
        ): IndexedReputationProofEventFilter

        'IndexedStartedTransitionProof(uint256,uint256,uint256,uint256,uint256[8])'(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            blindedUserState?: PromiseOrValue<BigNumberish> | null,
            globalStateTree?: PromiseOrValue<BigNumberish> | null,
            blindedHashChain?: null,
            proof?: null
        ): IndexedStartedTransitionProofEventFilter
        IndexedStartedTransitionProof(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            blindedUserState?: PromiseOrValue<BigNumberish> | null,
            globalStateTree?: PromiseOrValue<BigNumberish> | null,
            blindedHashChain?: null,
            proof?: null
        ): IndexedStartedTransitionProofEventFilter

        'IndexedUserSignedUpProof(uint256,uint256,uint256,tuple)'(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            epoch?: PromiseOrValue<BigNumberish> | null,
            epochKey?: PromiseOrValue<BigNumberish> | null,
            proof?: null
        ): IndexedUserSignedUpProofEventFilter
        IndexedUserSignedUpProof(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            epoch?: PromiseOrValue<BigNumberish> | null,
            epochKey?: PromiseOrValue<BigNumberish> | null,
            proof?: null
        ): IndexedUserSignedUpProofEventFilter

        'IndexedUserStateTransitionProof(uint256,tuple,uint256[])'(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            proof?: null,
            proofIndexRecords?: null
        ): IndexedUserStateTransitionProofEventFilter
        IndexedUserStateTransitionProof(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            proof?: null,
            proofIndexRecords?: null
        ): IndexedUserStateTransitionProofEventFilter

        'Sequencer(uint256,uint8)'(
            epoch?: PromiseOrValue<BigNumberish> | null,
            userEvent?: null
        ): SequencerEventFilter
        Sequencer(
            epoch?: PromiseOrValue<BigNumberish> | null,
            userEvent?: null
        ): SequencerEventFilter

        'UserSignedUp(uint256,uint256,uint256,uint256)'(
            epoch?: PromiseOrValue<BigNumberish> | null,
            identityCommitment?: PromiseOrValue<BigNumberish> | null,
            attesterId?: null,
            airdropAmount?: null
        ): UserSignedUpEventFilter
        UserSignedUp(
            epoch?: PromiseOrValue<BigNumberish> | null,
            identityCommitment?: PromiseOrValue<BigNumberish> | null,
            attesterId?: null,
            airdropAmount?: null
        ): UserSignedUpEventFilter

        'UserStateTransitioned(uint256,uint256,uint256)'(
            epoch?: PromiseOrValue<BigNumberish> | null,
            hashedLeaf?: PromiseOrValue<BigNumberish> | null,
            proofIndex?: null
        ): UserStateTransitionedEventFilter
        UserStateTransitioned(
            epoch?: PromiseOrValue<BigNumberish> | null,
            hashedLeaf?: PromiseOrValue<BigNumberish> | null,
            proofIndex?: null
        ): UserStateTransitionedEventFilter
    }

    estimateGas: {
        attesterSignUp(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        attesterSignUpViaRelayer(
            attester: PromiseOrValue<string>,
            signature: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        attesterSignUp(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        attesterSignUpViaRelayer(
            attester: PromiseOrValue<string>,
            signature: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
