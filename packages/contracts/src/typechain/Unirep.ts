/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type {
    FunctionFragment,
    Result,
    EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue,
} from './common'

export declare namespace UnirepTypes {
    export type TreeDepthsStruct = {
        globalStateTreeDepth: PromiseOrValue<BigNumberish>
        userStateTreeDepth: PromiseOrValue<BigNumberish>
        epochTreeDepth: PromiseOrValue<BigNumberish>
    }

    export type TreeDepthsStructOutput = [number, number, number] & {
        globalStateTreeDepth: number
        userStateTreeDepth: number
        epochTreeDepth: number
    }

    export type MaxValuesStruct = {
        maxUsers: PromiseOrValue<BigNumberish>
        maxAttesters: PromiseOrValue<BigNumberish>
    }

    export type MaxValuesStructOutput = [BigNumber, BigNumber] & {
        maxUsers: BigNumber
        maxAttesters: BigNumber
    }

    export type AttestationStruct = {
        attesterId: PromiseOrValue<BigNumberish>
        posRep: PromiseOrValue<BigNumberish>
        negRep: PromiseOrValue<BigNumberish>
        graffiti: PromiseOrValue<BigNumberish>
        signUp: PromiseOrValue<BigNumberish>
    }

    export type AttestationStructOutput = [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        attesterId: BigNumber
        posRep: BigNumber
        negRep: BigNumber
        graffiti: BigNumber
        signUp: BigNumber
    }

    export type EpochKeyProofStruct = {
        globalStateTree: PromiseOrValue<BigNumberish>
        epoch: PromiseOrValue<BigNumberish>
        epochKey: PromiseOrValue<BigNumberish>
        proof: PromiseOrValue<BigNumberish>[]
    }

    export type EpochKeyProofStructOutput = [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
    ] & {
        globalStateTree: BigNumber
        epoch: BigNumber
        epochKey: BigNumber
        proof: BigNumber[]
    }

    export type ReputationProofStruct = {
        repNullifiers: PromiseOrValue<BigNumberish>[]
        epoch: PromiseOrValue<BigNumberish>
        epochKey: PromiseOrValue<BigNumberish>
        globalStateTree: PromiseOrValue<BigNumberish>
        attesterId: PromiseOrValue<BigNumberish>
        proveReputationAmount: PromiseOrValue<BigNumberish>
        minRep: PromiseOrValue<BigNumberish>
        proveGraffiti: PromiseOrValue<BigNumberish>
        graffitiPreImage: PromiseOrValue<BigNumberish>
        proof: PromiseOrValue<BigNumberish>[]
    }

    export type ReputationProofStructOutput = [
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
    ] & {
        repNullifiers: BigNumber[]
        epoch: BigNumber
        epochKey: BigNumber
        globalStateTree: BigNumber
        attesterId: BigNumber
        proveReputationAmount: BigNumber
        minRep: BigNumber
        proveGraffiti: BigNumber
        graffitiPreImage: BigNumber
        proof: BigNumber[]
    }

    export type SignUpProofStruct = {
        epoch: PromiseOrValue<BigNumberish>
        epochKey: PromiseOrValue<BigNumberish>
        globalStateTree: PromiseOrValue<BigNumberish>
        attesterId: PromiseOrValue<BigNumberish>
        userHasSignedUp: PromiseOrValue<BigNumberish>
        proof: PromiseOrValue<BigNumberish>[]
    }

    export type SignUpProofStructOutput = [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
    ] & {
        epoch: BigNumber
        epochKey: BigNumber
        globalStateTree: BigNumber
        attesterId: BigNumber
        userHasSignedUp: BigNumber
        proof: BigNumber[]
    }

    export type UserTransitionProofStruct = {
        newGlobalStateTreeLeaf: PromiseOrValue<BigNumberish>
        epkNullifiers: PromiseOrValue<BigNumberish>[]
        transitionFromEpoch: PromiseOrValue<BigNumberish>
        blindedUserStates: PromiseOrValue<BigNumberish>[]
        fromGlobalStateTree: PromiseOrValue<BigNumberish>
        blindedHashChains: PromiseOrValue<BigNumberish>[]
        fromEpochTree: PromiseOrValue<BigNumberish>
        proof: PromiseOrValue<BigNumberish>[]
    }

    export type UserTransitionProofStructOutput = [
        BigNumber,
        BigNumber[],
        BigNumber,
        BigNumber[],
        BigNumber,
        BigNumber[],
        BigNumber,
        BigNumber[]
    ] & {
        newGlobalStateTreeLeaf: BigNumber
        epkNullifiers: BigNumber[]
        transitionFromEpoch: BigNumber
        blindedUserStates: BigNumber[]
        fromGlobalStateTree: BigNumber
        blindedHashChains: BigNumber[]
        fromEpochTree: BigNumber
        proof: BigNumber[]
    }
}

export interface UnirepInterface extends utils.Interface {
    functions: {
        'airdropAmount(address)': FunctionFragment
        'airdropEpochKey((uint256,uint256,uint256,uint256,uint256,uint256[8]))': FunctionFragment
        'attesterSignUp()': FunctionFragment
        'attesterSignUpViaRelayer(address,bytes)': FunctionFragment
        'attesters(address)': FunctionFragment
        'attestingFee()': FunctionFragment
        'beginEpochTransition()': FunctionFragment
        'burnAttestingFee()': FunctionFragment
        'collectEpochTransitionCompensation()': FunctionFragment
        'collectedAttestingFee()': FunctionFragment
        'currentEpoch()': FunctionFragment
        'epochLength()': FunctionFragment
        'epochTransitionCompensation(address)': FunctionFragment
        'getProofIndex(bytes32)': FunctionFragment
        'hasUserSignedUp(uint256)': FunctionFragment
        'hashEpochKeyProof((uint256,uint256,uint256,uint256[8]))': FunctionFragment
        'hashProcessAttestationsProof(uint256,uint256,uint256,uint256[8])': FunctionFragment
        'hashReputationProof((uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[8]))': FunctionFragment
        'hashSignUpProof((uint256,uint256,uint256,uint256,uint256,uint256[8]))': FunctionFragment
        'hashStartTransitionProof(uint256,uint256,uint256,uint256[8])': FunctionFragment
        'hashUserStateTransitionProof((uint256,uint256[],uint256,uint256[],uint256,uint256[],uint256,uint256[8]))': FunctionFragment
        'latestEpochTransitionTime()': FunctionFragment
        'maxAttesters()': FunctionFragment
        'maxEpochKey()': FunctionFragment
        'maxReputationBudget()': FunctionFragment
        'maxUsers()': FunctionFragment
        'nextAttesterId()': FunctionFragment
        'numEpochKeyNoncePerEpoch()': FunctionFragment
        'numUserSignUps()': FunctionFragment
        'processAttestations(uint256,uint256,uint256,uint256[8])': FunctionFragment
        'setAirdropAmount(uint256)': FunctionFragment
        'spendReputation((uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[8]))': FunctionFragment
        'startUserStateTransition(uint256,uint256,uint256,uint256[8])': FunctionFragment
        'submitAttestation((uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256)': FunctionFragment
        'submitAttestationViaRelayer(address,bytes,(uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256)': FunctionFragment
        'submitEpochKeyProof((uint256,uint256,uint256,uint256[8]))': FunctionFragment
        'treeDepths()': FunctionFragment
        'updateUserStateRoot((uint256,uint256[],uint256,uint256[],uint256,uint256[],uint256,uint256[8]),uint256[])': FunctionFragment
        'userSignUp(uint256)': FunctionFragment
        'verifyEpochKeyValidity((uint256,uint256,uint256,uint256[8]))': FunctionFragment
        'verifyProcessAttestationProof(uint256,uint256,uint256,uint256[8])': FunctionFragment
        'verifyReputation((uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[8]))': FunctionFragment
        'verifyStartTransitionProof(uint256,uint256,uint256,uint256[8])': FunctionFragment
        'verifyUserSignUp((uint256,uint256,uint256,uint256,uint256,uint256[8]))': FunctionFragment
        'verifyUserStateTransition((uint256,uint256[],uint256,uint256[],uint256,uint256[],uint256,uint256[8]))': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'airdropAmount'
            | 'airdropEpochKey'
            | 'attesterSignUp'
            | 'attesterSignUpViaRelayer'
            | 'attesters'
            | 'attestingFee'
            | 'beginEpochTransition'
            | 'burnAttestingFee'
            | 'collectEpochTransitionCompensation'
            | 'collectedAttestingFee'
            | 'currentEpoch'
            | 'epochLength'
            | 'epochTransitionCompensation'
            | 'getProofIndex'
            | 'hasUserSignedUp'
            | 'hashEpochKeyProof'
            | 'hashProcessAttestationsProof'
            | 'hashReputationProof'
            | 'hashSignUpProof'
            | 'hashStartTransitionProof'
            | 'hashUserStateTransitionProof'
            | 'latestEpochTransitionTime'
            | 'maxAttesters'
            | 'maxEpochKey'
            | 'maxReputationBudget'
            | 'maxUsers'
            | 'nextAttesterId'
            | 'numEpochKeyNoncePerEpoch'
            | 'numUserSignUps'
            | 'processAttestations'
            | 'setAirdropAmount'
            | 'spendReputation'
            | 'startUserStateTransition'
            | 'submitAttestation'
            | 'submitAttestationViaRelayer'
            | 'submitEpochKeyProof'
            | 'treeDepths'
            | 'updateUserStateRoot'
            | 'userSignUp'
            | 'verifyEpochKeyValidity'
            | 'verifyProcessAttestationProof'
            | 'verifyReputation'
            | 'verifyStartTransitionProof'
            | 'verifyUserSignUp'
            | 'verifyUserStateTransition'
    ): FunctionFragment

    encodeFunctionData(
        functionFragment: 'airdropAmount',
        values: [PromiseOrValue<string>]
    ): string
    encodeFunctionData(
        functionFragment: 'airdropEpochKey',
        values: [UnirepTypes.SignUpProofStruct]
    ): string
    encodeFunctionData(
        functionFragment: 'attesterSignUp',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'attesterSignUpViaRelayer',
        values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(
        functionFragment: 'attesters',
        values: [PromiseOrValue<string>]
    ): string
    encodeFunctionData(
        functionFragment: 'attestingFee',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'beginEpochTransition',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'burnAttestingFee',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'collectEpochTransitionCompensation',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'collectedAttestingFee',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'currentEpoch',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'epochLength',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'epochTransitionCompensation',
        values: [PromiseOrValue<string>]
    ): string
    encodeFunctionData(
        functionFragment: 'getProofIndex',
        values: [PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(
        functionFragment: 'hasUserSignedUp',
        values: [PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'hashEpochKeyProof',
        values: [UnirepTypes.EpochKeyProofStruct]
    ): string
    encodeFunctionData(
        functionFragment: 'hashProcessAttestationsProof',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>[]
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'hashReputationProof',
        values: [UnirepTypes.ReputationProofStruct]
    ): string
    encodeFunctionData(
        functionFragment: 'hashSignUpProof',
        values: [UnirepTypes.SignUpProofStruct]
    ): string
    encodeFunctionData(
        functionFragment: 'hashStartTransitionProof',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>[]
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'hashUserStateTransitionProof',
        values: [UnirepTypes.UserTransitionProofStruct]
    ): string
    encodeFunctionData(
        functionFragment: 'latestEpochTransitionTime',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'maxAttesters',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'maxEpochKey',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'maxReputationBudget',
        values?: undefined
    ): string
    encodeFunctionData(functionFragment: 'maxUsers', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'nextAttesterId',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'numEpochKeyNoncePerEpoch',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'numUserSignUps',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'processAttestations',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>[]
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'setAirdropAmount',
        values: [PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'spendReputation',
        values: [UnirepTypes.ReputationProofStruct]
    ): string
    encodeFunctionData(
        functionFragment: 'startUserStateTransition',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>[]
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'submitAttestation',
        values: [
            UnirepTypes.AttestationStruct,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'submitAttestationViaRelayer',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BytesLike>,
            UnirepTypes.AttestationStruct,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'submitEpochKeyProof',
        values: [UnirepTypes.EpochKeyProofStruct]
    ): string
    encodeFunctionData(
        functionFragment: 'treeDepths',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'updateUserStateRoot',
        values: [
            UnirepTypes.UserTransitionProofStruct,
            PromiseOrValue<BigNumberish>[]
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'userSignUp',
        values: [PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'verifyEpochKeyValidity',
        values: [UnirepTypes.EpochKeyProofStruct]
    ): string
    encodeFunctionData(
        functionFragment: 'verifyProcessAttestationProof',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>[]
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'verifyReputation',
        values: [UnirepTypes.ReputationProofStruct]
    ): string
    encodeFunctionData(
        functionFragment: 'verifyStartTransitionProof',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>[]
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'verifyUserSignUp',
        values: [UnirepTypes.SignUpProofStruct]
    ): string
    encodeFunctionData(
        functionFragment: 'verifyUserStateTransition',
        values: [UnirepTypes.UserTransitionProofStruct]
    ): string

    decodeFunctionResult(
        functionFragment: 'airdropAmount',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'airdropEpochKey',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'attesterSignUp',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'attesterSignUpViaRelayer',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'attesters', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'attestingFee',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'beginEpochTransition',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'burnAttestingFee',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'collectEpochTransitionCompensation',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'collectedAttestingFee',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'currentEpoch',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'epochLength',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'epochTransitionCompensation',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'getProofIndex',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'hasUserSignedUp',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'hashEpochKeyProof',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'hashProcessAttestationsProof',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'hashReputationProof',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'hashSignUpProof',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'hashStartTransitionProof',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'hashUserStateTransitionProof',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'latestEpochTransitionTime',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'maxAttesters',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'maxEpochKey',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'maxReputationBudget',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'maxUsers', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'nextAttesterId',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'numEpochKeyNoncePerEpoch',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'numUserSignUps',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'processAttestations',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'setAirdropAmount',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'spendReputation',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'startUserStateTransition',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'submitAttestation',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'submitAttestationViaRelayer',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'submitEpochKeyProof',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'treeDepths',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'updateUserStateRoot',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'userSignUp',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'verifyEpochKeyValidity',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'verifyProcessAttestationProof',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'verifyReputation',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'verifyStartTransitionProof',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'verifyUserSignUp',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'verifyUserStateTransition',
        data: BytesLike
    ): Result

    events: {
        'AttestationSubmitted(uint256,uint256,address,uint8,tuple,uint256,uint256)': EventFragment
        'EpochEnded(uint256)': EventFragment
        'IndexedEpochKeyProof(uint256,uint256,uint256,tuple)': EventFragment
        'IndexedProcessedAttestationsProof(uint256,uint256,uint256,uint256,uint256[8])': EventFragment
        'IndexedReputationProof(uint256,uint256,uint256,tuple)': EventFragment
        'IndexedStartedTransitionProof(uint256,uint256,uint256,uint256,uint256[8])': EventFragment
        'IndexedUserSignedUpProof(uint256,uint256,uint256,tuple)': EventFragment
        'IndexedUserStateTransitionProof(uint256,tuple,uint256[])': EventFragment
        'Sequencer(uint256,uint8)': EventFragment
        'UserSignedUp(uint256,uint256,uint256,uint256)': EventFragment
        'UserStateTransitioned(uint256,uint256,uint256)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'AttestationSubmitted'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'EpochEnded'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'IndexedEpochKeyProof'): EventFragment
    getEvent(
        nameOrSignatureOrTopic: 'IndexedProcessedAttestationsProof'
    ): EventFragment
    getEvent(nameOrSignatureOrTopic: 'IndexedReputationProof'): EventFragment
    getEvent(
        nameOrSignatureOrTopic: 'IndexedStartedTransitionProof'
    ): EventFragment
    getEvent(nameOrSignatureOrTopic: 'IndexedUserSignedUpProof'): EventFragment
    getEvent(
        nameOrSignatureOrTopic: 'IndexedUserStateTransitionProof'
    ): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Sequencer'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'UserSignedUp'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'UserStateTransitioned'): EventFragment
}

export interface AttestationSubmittedEventObject {
    epoch: BigNumber
    epochKey: BigNumber
    attester: string
    attestationEvent: number
    attestation: UnirepTypes.AttestationStructOutput
    toProofIndex: BigNumber
    fromProofIndex: BigNumber
}
export type AttestationSubmittedEvent = TypedEvent<
    [
        BigNumber,
        BigNumber,
        string,
        number,
        UnirepTypes.AttestationStructOutput,
        BigNumber,
        BigNumber
    ],
    AttestationSubmittedEventObject
>

export type AttestationSubmittedEventFilter =
    TypedEventFilter<AttestationSubmittedEvent>

export interface EpochEndedEventObject {
    epoch: BigNumber
}
export type EpochEndedEvent = TypedEvent<[BigNumber], EpochEndedEventObject>

export type EpochEndedEventFilter = TypedEventFilter<EpochEndedEvent>

export interface IndexedEpochKeyProofEventObject {
    proofIndex: BigNumber
    epoch: BigNumber
    epochKey: BigNumber
    proof: UnirepTypes.EpochKeyProofStructOutput
}
export type IndexedEpochKeyProofEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, UnirepTypes.EpochKeyProofStructOutput],
    IndexedEpochKeyProofEventObject
>

export type IndexedEpochKeyProofEventFilter =
    TypedEventFilter<IndexedEpochKeyProofEvent>

export interface IndexedProcessedAttestationsProofEventObject {
    proofIndex: BigNumber
    inputBlindedUserState: BigNumber
    outputBlindedUserState: BigNumber
    outputBlindedHashChain: BigNumber
    proof: BigNumber[]
}
export type IndexedProcessedAttestationsProofEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber[]],
    IndexedProcessedAttestationsProofEventObject
>

export type IndexedProcessedAttestationsProofEventFilter =
    TypedEventFilter<IndexedProcessedAttestationsProofEvent>

export interface IndexedReputationProofEventObject {
    proofIndex: BigNumber
    epoch: BigNumber
    epochKey: BigNumber
    proof: UnirepTypes.ReputationProofStructOutput
}
export type IndexedReputationProofEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, UnirepTypes.ReputationProofStructOutput],
    IndexedReputationProofEventObject
>

export type IndexedReputationProofEventFilter =
    TypedEventFilter<IndexedReputationProofEvent>

export interface IndexedStartedTransitionProofEventObject {
    proofIndex: BigNumber
    blindedUserState: BigNumber
    globalStateTree: BigNumber
    blindedHashChain: BigNumber
    proof: BigNumber[]
}
export type IndexedStartedTransitionProofEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber[]],
    IndexedStartedTransitionProofEventObject
>

export type IndexedStartedTransitionProofEventFilter =
    TypedEventFilter<IndexedStartedTransitionProofEvent>

export interface IndexedUserSignedUpProofEventObject {
    proofIndex: BigNumber
    epoch: BigNumber
    epochKey: BigNumber
    proof: UnirepTypes.SignUpProofStructOutput
}
export type IndexedUserSignedUpProofEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, UnirepTypes.SignUpProofStructOutput],
    IndexedUserSignedUpProofEventObject
>

export type IndexedUserSignedUpProofEventFilter =
    TypedEventFilter<IndexedUserSignedUpProofEvent>

export interface IndexedUserStateTransitionProofEventObject {
    proofIndex: BigNumber
    proof: UnirepTypes.UserTransitionProofStructOutput
    proofIndexRecords: BigNumber[]
}
export type IndexedUserStateTransitionProofEvent = TypedEvent<
    [BigNumber, UnirepTypes.UserTransitionProofStructOutput, BigNumber[]],
    IndexedUserStateTransitionProofEventObject
>

export type IndexedUserStateTransitionProofEventFilter =
    TypedEventFilter<IndexedUserStateTransitionProofEvent>

export interface SequencerEventObject {
    epoch: BigNumber
    userEvent: number
}
export type SequencerEvent = TypedEvent<
    [BigNumber, number],
    SequencerEventObject
>

export type SequencerEventFilter = TypedEventFilter<SequencerEvent>

export interface UserSignedUpEventObject {
    epoch: BigNumber
    identityCommitment: BigNumber
    attesterId: BigNumber
    airdropAmount: BigNumber
}
export type UserSignedUpEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, BigNumber],
    UserSignedUpEventObject
>

export type UserSignedUpEventFilter = TypedEventFilter<UserSignedUpEvent>

export interface UserStateTransitionedEventObject {
    epoch: BigNumber
    hashedLeaf: BigNumber
    proofIndex: BigNumber
}
export type UserStateTransitionedEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber],
    UserStateTransitionedEventObject
>

export type UserStateTransitionedEventFilter =
    TypedEventFilter<UserStateTransitionedEvent>

export interface Unirep extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: UnirepInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        airdropAmount(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        airdropEpochKey(
            input: UnirepTypes.SignUpProofStruct,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        attesterSignUp(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        attesterSignUpViaRelayer(
            attester: PromiseOrValue<string>,
            signature: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        attesters(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        attestingFee(overrides?: CallOverrides): Promise<[BigNumber]>

        beginEpochTransition(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        burnAttestingFee(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        collectEpochTransitionCompensation(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        collectedAttestingFee(overrides?: CallOverrides): Promise<[BigNumber]>

        currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>

        epochLength(overrides?: CallOverrides): Promise<[BigNumber]>

        epochTransitionCompensation(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        getProofIndex(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        hasUserSignedUp(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        hashEpochKeyProof(
            input: UnirepTypes.EpochKeyProofStruct,
            overrides?: CallOverrides
        ): Promise<[string]>

        hashProcessAttestationsProof(
            outputBlindedUserState: PromiseOrValue<BigNumberish>,
            outputBlindedHashChain: PromiseOrValue<BigNumberish>,
            inputBlindedUserState: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<[string]>

        hashReputationProof(
            input: UnirepTypes.ReputationProofStruct,
            overrides?: CallOverrides
        ): Promise<[string]>

        hashSignUpProof(
            input: UnirepTypes.SignUpProofStruct,
            overrides?: CallOverrides
        ): Promise<[string]>

        hashStartTransitionProof(
            blindedUserState: PromiseOrValue<BigNumberish>,
            blindedHashChain: PromiseOrValue<BigNumberish>,
            globalStateTree: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<[string]>

        hashUserStateTransitionProof(
            input: UnirepTypes.UserTransitionProofStruct,
            overrides?: CallOverrides
        ): Promise<[string]>

        latestEpochTransitionTime(
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        maxAttesters(overrides?: CallOverrides): Promise<[BigNumber]>

        maxEpochKey(overrides?: CallOverrides): Promise<[BigNumber]>

        maxReputationBudget(overrides?: CallOverrides): Promise<[number]>

        maxUsers(overrides?: CallOverrides): Promise<[BigNumber]>

        nextAttesterId(overrides?: CallOverrides): Promise<[BigNumber]>

        numEpochKeyNoncePerEpoch(overrides?: CallOverrides): Promise<[number]>

        numUserSignUps(overrides?: CallOverrides): Promise<[BigNumber]>

        processAttestations(
            outputBlindedUserState: PromiseOrValue<BigNumberish>,
            outputBlindedHashChain: PromiseOrValue<BigNumberish>,
            inputBlindedUserState: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setAirdropAmount(
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        spendReputation(
            input: UnirepTypes.ReputationProofStruct,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        startUserStateTransition(
            blindedUserState: PromiseOrValue<BigNumberish>,
            blindedHashChain: PromiseOrValue<BigNumberish>,
            globalStateTree: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        submitAttestation(
            attestation: UnirepTypes.AttestationStruct,
            epochKey: PromiseOrValue<BigNumberish>,
            toProofIndex: PromiseOrValue<BigNumberish>,
            fromProofIndex: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        submitAttestationViaRelayer(
            attester: PromiseOrValue<string>,
            signature: PromiseOrValue<BytesLike>,
            attestation: UnirepTypes.AttestationStruct,
            epochKey: PromiseOrValue<BigNumberish>,
            toProofIndex: PromiseOrValue<BigNumberish>,
            fromProofIndex: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        submitEpochKeyProof(
            input: UnirepTypes.EpochKeyProofStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        treeDepths(overrides?: CallOverrides): Promise<
            [number, number, number] & {
                globalStateTreeDepth: number
                userStateTreeDepth: number
                epochTreeDepth: number
            }
        >

        updateUserStateRoot(
            proof: UnirepTypes.UserTransitionProofStruct,
            proofIndexRecords: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        userSignUp(
            identityCommitment: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        verifyEpochKeyValidity(
            input: UnirepTypes.EpochKeyProofStruct,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        verifyProcessAttestationProof(
            outputBlindedUserState: PromiseOrValue<BigNumberish>,
            outputBlindedHashChain: PromiseOrValue<BigNumberish>,
            inputBlindedUserState: PromiseOrValue<BigNumberish>,
            _proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<[boolean]>

        verifyReputation(
            input: UnirepTypes.ReputationProofStruct,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        verifyStartTransitionProof(
            blindedUserState: PromiseOrValue<BigNumberish>,
            blindedHashChain: PromiseOrValue<BigNumberish>,
            GSTRoot: PromiseOrValue<BigNumberish>,
            _proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<[boolean]>

        verifyUserSignUp(
            input: UnirepTypes.SignUpProofStruct,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        verifyUserStateTransition(
            input: UnirepTypes.UserTransitionProofStruct,
            overrides?: CallOverrides
        ): Promise<[boolean]>
    }

    airdropAmount(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    airdropEpochKey(
        input: UnirepTypes.SignUpProofStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    attesterSignUp(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    attesterSignUpViaRelayer(
        attester: PromiseOrValue<string>,
        signature: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    attesters(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    attestingFee(overrides?: CallOverrides): Promise<BigNumber>

    beginEpochTransition(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    burnAttestingFee(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    collectEpochTransitionCompensation(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    collectedAttestingFee(overrides?: CallOverrides): Promise<BigNumber>

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>

    epochLength(overrides?: CallOverrides): Promise<BigNumber>

    epochTransitionCompensation(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    getProofIndex(
        arg0: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    hasUserSignedUp(
        arg0: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<boolean>

    hashEpochKeyProof(
        input: UnirepTypes.EpochKeyProofStruct,
        overrides?: CallOverrides
    ): Promise<string>

    hashProcessAttestationsProof(
        outputBlindedUserState: PromiseOrValue<BigNumberish>,
        outputBlindedHashChain: PromiseOrValue<BigNumberish>,
        inputBlindedUserState: PromiseOrValue<BigNumberish>,
        proof: PromiseOrValue<BigNumberish>[],
        overrides?: CallOverrides
    ): Promise<string>

    hashReputationProof(
        input: UnirepTypes.ReputationProofStruct,
        overrides?: CallOverrides
    ): Promise<string>

    hashSignUpProof(
        input: UnirepTypes.SignUpProofStruct,
        overrides?: CallOverrides
    ): Promise<string>

    hashStartTransitionProof(
        blindedUserState: PromiseOrValue<BigNumberish>,
        blindedHashChain: PromiseOrValue<BigNumberish>,
        globalStateTree: PromiseOrValue<BigNumberish>,
        proof: PromiseOrValue<BigNumberish>[],
        overrides?: CallOverrides
    ): Promise<string>

    hashUserStateTransitionProof(
        input: UnirepTypes.UserTransitionProofStruct,
        overrides?: CallOverrides
    ): Promise<string>

    latestEpochTransitionTime(overrides?: CallOverrides): Promise<BigNumber>

    maxAttesters(overrides?: CallOverrides): Promise<BigNumber>

    maxEpochKey(overrides?: CallOverrides): Promise<BigNumber>

    maxReputationBudget(overrides?: CallOverrides): Promise<number>

    maxUsers(overrides?: CallOverrides): Promise<BigNumber>

    nextAttesterId(overrides?: CallOverrides): Promise<BigNumber>

    numEpochKeyNoncePerEpoch(overrides?: CallOverrides): Promise<number>

    numUserSignUps(overrides?: CallOverrides): Promise<BigNumber>

    processAttestations(
        outputBlindedUserState: PromiseOrValue<BigNumberish>,
        outputBlindedHashChain: PromiseOrValue<BigNumberish>,
        inputBlindedUserState: PromiseOrValue<BigNumberish>,
        proof: PromiseOrValue<BigNumberish>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setAirdropAmount(
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    spendReputation(
        input: UnirepTypes.ReputationProofStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    startUserStateTransition(
        blindedUserState: PromiseOrValue<BigNumberish>,
        blindedHashChain: PromiseOrValue<BigNumberish>,
        globalStateTree: PromiseOrValue<BigNumberish>,
        proof: PromiseOrValue<BigNumberish>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    submitAttestation(
        attestation: UnirepTypes.AttestationStruct,
        epochKey: PromiseOrValue<BigNumberish>,
        toProofIndex: PromiseOrValue<BigNumberish>,
        fromProofIndex: PromiseOrValue<BigNumberish>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    submitAttestationViaRelayer(
        attester: PromiseOrValue<string>,
        signature: PromiseOrValue<BytesLike>,
        attestation: UnirepTypes.AttestationStruct,
        epochKey: PromiseOrValue<BigNumberish>,
        toProofIndex: PromiseOrValue<BigNumberish>,
        fromProofIndex: PromiseOrValue<BigNumberish>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    submitEpochKeyProof(
        input: UnirepTypes.EpochKeyProofStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    treeDepths(overrides?: CallOverrides): Promise<
        [number, number, number] & {
            globalStateTreeDepth: number
            userStateTreeDepth: number
            epochTreeDepth: number
        }
    >

    updateUserStateRoot(
        proof: UnirepTypes.UserTransitionProofStruct,
        proofIndexRecords: PromiseOrValue<BigNumberish>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    userSignUp(
        identityCommitment: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    verifyEpochKeyValidity(
        input: UnirepTypes.EpochKeyProofStruct,
        overrides?: CallOverrides
    ): Promise<boolean>

    verifyProcessAttestationProof(
        outputBlindedUserState: PromiseOrValue<BigNumberish>,
        outputBlindedHashChain: PromiseOrValue<BigNumberish>,
        inputBlindedUserState: PromiseOrValue<BigNumberish>,
        _proof: PromiseOrValue<BigNumberish>[],
        overrides?: CallOverrides
    ): Promise<boolean>

    verifyReputation(
        input: UnirepTypes.ReputationProofStruct,
        overrides?: CallOverrides
    ): Promise<boolean>

    verifyStartTransitionProof(
        blindedUserState: PromiseOrValue<BigNumberish>,
        blindedHashChain: PromiseOrValue<BigNumberish>,
        GSTRoot: PromiseOrValue<BigNumberish>,
        _proof: PromiseOrValue<BigNumberish>[],
        overrides?: CallOverrides
    ): Promise<boolean>

    verifyUserSignUp(
        input: UnirepTypes.SignUpProofStruct,
        overrides?: CallOverrides
    ): Promise<boolean>

    verifyUserStateTransition(
        input: UnirepTypes.UserTransitionProofStruct,
        overrides?: CallOverrides
    ): Promise<boolean>

    callStatic: {
        airdropAmount(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        airdropEpochKey(
            input: UnirepTypes.SignUpProofStruct,
            overrides?: CallOverrides
        ): Promise<void>

        attesterSignUp(overrides?: CallOverrides): Promise<void>

        attesterSignUpViaRelayer(
            attester: PromiseOrValue<string>,
            signature: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>

        attesters(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        attestingFee(overrides?: CallOverrides): Promise<BigNumber>

        beginEpochTransition(overrides?: CallOverrides): Promise<void>

        burnAttestingFee(overrides?: CallOverrides): Promise<void>

        collectEpochTransitionCompensation(
            overrides?: CallOverrides
        ): Promise<void>

        collectedAttestingFee(overrides?: CallOverrides): Promise<BigNumber>

        currentEpoch(overrides?: CallOverrides): Promise<BigNumber>

        epochLength(overrides?: CallOverrides): Promise<BigNumber>

        epochTransitionCompensation(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getProofIndex(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        hasUserSignedUp(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<boolean>

        hashEpochKeyProof(
            input: UnirepTypes.EpochKeyProofStruct,
            overrides?: CallOverrides
        ): Promise<string>

        hashProcessAttestationsProof(
            outputBlindedUserState: PromiseOrValue<BigNumberish>,
            outputBlindedHashChain: PromiseOrValue<BigNumberish>,
            inputBlindedUserState: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<string>

        hashReputationProof(
            input: UnirepTypes.ReputationProofStruct,
            overrides?: CallOverrides
        ): Promise<string>

        hashSignUpProof(
            input: UnirepTypes.SignUpProofStruct,
            overrides?: CallOverrides
        ): Promise<string>

        hashStartTransitionProof(
            blindedUserState: PromiseOrValue<BigNumberish>,
            blindedHashChain: PromiseOrValue<BigNumberish>,
            globalStateTree: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<string>

        hashUserStateTransitionProof(
            input: UnirepTypes.UserTransitionProofStruct,
            overrides?: CallOverrides
        ): Promise<string>

        latestEpochTransitionTime(overrides?: CallOverrides): Promise<BigNumber>

        maxAttesters(overrides?: CallOverrides): Promise<BigNumber>

        maxEpochKey(overrides?: CallOverrides): Promise<BigNumber>

        maxReputationBudget(overrides?: CallOverrides): Promise<number>

        maxUsers(overrides?: CallOverrides): Promise<BigNumber>

        nextAttesterId(overrides?: CallOverrides): Promise<BigNumber>

        numEpochKeyNoncePerEpoch(overrides?: CallOverrides): Promise<number>

        numUserSignUps(overrides?: CallOverrides): Promise<BigNumber>

        processAttestations(
            outputBlindedUserState: PromiseOrValue<BigNumberish>,
            outputBlindedHashChain: PromiseOrValue<BigNumberish>,
            inputBlindedUserState: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<void>

        setAirdropAmount(
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        spendReputation(
            input: UnirepTypes.ReputationProofStruct,
            overrides?: CallOverrides
        ): Promise<void>

        startUserStateTransition(
            blindedUserState: PromiseOrValue<BigNumberish>,
            blindedHashChain: PromiseOrValue<BigNumberish>,
            globalStateTree: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<void>

        submitAttestation(
            attestation: UnirepTypes.AttestationStruct,
            epochKey: PromiseOrValue<BigNumberish>,
            toProofIndex: PromiseOrValue<BigNumberish>,
            fromProofIndex: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        submitAttestationViaRelayer(
            attester: PromiseOrValue<string>,
            signature: PromiseOrValue<BytesLike>,
            attestation: UnirepTypes.AttestationStruct,
            epochKey: PromiseOrValue<BigNumberish>,
            toProofIndex: PromiseOrValue<BigNumberish>,
            fromProofIndex: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        submitEpochKeyProof(
            input: UnirepTypes.EpochKeyProofStruct,
            overrides?: CallOverrides
        ): Promise<void>

        treeDepths(overrides?: CallOverrides): Promise<
            [number, number, number] & {
                globalStateTreeDepth: number
                userStateTreeDepth: number
                epochTreeDepth: number
            }
        >

        updateUserStateRoot(
            proof: UnirepTypes.UserTransitionProofStruct,
            proofIndexRecords: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<void>

        userSignUp(
            identityCommitment: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        verifyEpochKeyValidity(
            input: UnirepTypes.EpochKeyProofStruct,
            overrides?: CallOverrides
        ): Promise<boolean>

        verifyProcessAttestationProof(
            outputBlindedUserState: PromiseOrValue<BigNumberish>,
            outputBlindedHashChain: PromiseOrValue<BigNumberish>,
            inputBlindedUserState: PromiseOrValue<BigNumberish>,
            _proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<boolean>

        verifyReputation(
            input: UnirepTypes.ReputationProofStruct,
            overrides?: CallOverrides
        ): Promise<boolean>

        verifyStartTransitionProof(
            blindedUserState: PromiseOrValue<BigNumberish>,
            blindedHashChain: PromiseOrValue<BigNumberish>,
            GSTRoot: PromiseOrValue<BigNumberish>,
            _proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<boolean>

        verifyUserSignUp(
            input: UnirepTypes.SignUpProofStruct,
            overrides?: CallOverrides
        ): Promise<boolean>

        verifyUserStateTransition(
            input: UnirepTypes.UserTransitionProofStruct,
            overrides?: CallOverrides
        ): Promise<boolean>
    }

    filters: {
        'AttestationSubmitted(uint256,uint256,address,uint8,tuple,uint256,uint256)'(
            epoch?: PromiseOrValue<BigNumberish> | null,
            epochKey?: PromiseOrValue<BigNumberish> | null,
            attester?: PromiseOrValue<string> | null,
            attestationEvent?: null,
            attestation?: null,
            toProofIndex?: null,
            fromProofIndex?: null
        ): AttestationSubmittedEventFilter
        AttestationSubmitted(
            epoch?: PromiseOrValue<BigNumberish> | null,
            epochKey?: PromiseOrValue<BigNumberish> | null,
            attester?: PromiseOrValue<string> | null,
            attestationEvent?: null,
            attestation?: null,
            toProofIndex?: null,
            fromProofIndex?: null
        ): AttestationSubmittedEventFilter

        'EpochEnded(uint256)'(
            epoch?: PromiseOrValue<BigNumberish> | null
        ): EpochEndedEventFilter
        EpochEnded(
            epoch?: PromiseOrValue<BigNumberish> | null
        ): EpochEndedEventFilter

        'IndexedEpochKeyProof(uint256,uint256,uint256,tuple)'(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            epoch?: PromiseOrValue<BigNumberish> | null,
            epochKey?: PromiseOrValue<BigNumberish> | null,
            proof?: null
        ): IndexedEpochKeyProofEventFilter
        IndexedEpochKeyProof(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            epoch?: PromiseOrValue<BigNumberish> | null,
            epochKey?: PromiseOrValue<BigNumberish> | null,
            proof?: null
        ): IndexedEpochKeyProofEventFilter

        'IndexedProcessedAttestationsProof(uint256,uint256,uint256,uint256,uint256[8])'(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            inputBlindedUserState?: PromiseOrValue<BigNumberish> | null,
            outputBlindedUserState?: null,
            outputBlindedHashChain?: null,
            proof?: null
        ): IndexedProcessedAttestationsProofEventFilter
        IndexedProcessedAttestationsProof(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            inputBlindedUserState?: PromiseOrValue<BigNumberish> | null,
            outputBlindedUserState?: null,
            outputBlindedHashChain?: null,
            proof?: null
        ): IndexedProcessedAttestationsProofEventFilter

        'IndexedReputationProof(uint256,uint256,uint256,tuple)'(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            epoch?: PromiseOrValue<BigNumberish> | null,
            epochKey?: PromiseOrValue<BigNumberish> | null,
            proof?: null
        ): IndexedReputationProofEventFilter
        IndexedReputationProof(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            epoch?: PromiseOrValue<BigNumberish> | null,
            epochKey?: PromiseOrValue<BigNumberish> | null,
            proof?: null
        ): IndexedReputationProofEventFilter

        'IndexedStartedTransitionProof(uint256,uint256,uint256,uint256,uint256[8])'(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            blindedUserState?: PromiseOrValue<BigNumberish> | null,
            globalStateTree?: PromiseOrValue<BigNumberish> | null,
            blindedHashChain?: null,
            proof?: null
        ): IndexedStartedTransitionProofEventFilter
        IndexedStartedTransitionProof(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            blindedUserState?: PromiseOrValue<BigNumberish> | null,
            globalStateTree?: PromiseOrValue<BigNumberish> | null,
            blindedHashChain?: null,
            proof?: null
        ): IndexedStartedTransitionProofEventFilter

        'IndexedUserSignedUpProof(uint256,uint256,uint256,tuple)'(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            epoch?: PromiseOrValue<BigNumberish> | null,
            epochKey?: PromiseOrValue<BigNumberish> | null,
            proof?: null
        ): IndexedUserSignedUpProofEventFilter
        IndexedUserSignedUpProof(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            epoch?: PromiseOrValue<BigNumberish> | null,
            epochKey?: PromiseOrValue<BigNumberish> | null,
            proof?: null
        ): IndexedUserSignedUpProofEventFilter

        'IndexedUserStateTransitionProof(uint256,tuple,uint256[])'(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            proof?: null,
            proofIndexRecords?: null
        ): IndexedUserStateTransitionProofEventFilter
        IndexedUserStateTransitionProof(
            proofIndex?: PromiseOrValue<BigNumberish> | null,
            proof?: null,
            proofIndexRecords?: null
        ): IndexedUserStateTransitionProofEventFilter

        'Sequencer(uint256,uint8)'(
            epoch?: PromiseOrValue<BigNumberish> | null,
            userEvent?: null
        ): SequencerEventFilter
        Sequencer(
            epoch?: PromiseOrValue<BigNumberish> | null,
            userEvent?: null
        ): SequencerEventFilter

        'UserSignedUp(uint256,uint256,uint256,uint256)'(
            epoch?: PromiseOrValue<BigNumberish> | null,
            identityCommitment?: PromiseOrValue<BigNumberish> | null,
            attesterId?: null,
            airdropAmount?: null
        ): UserSignedUpEventFilter
        UserSignedUp(
            epoch?: PromiseOrValue<BigNumberish> | null,
            identityCommitment?: PromiseOrValue<BigNumberish> | null,
            attesterId?: null,
            airdropAmount?: null
        ): UserSignedUpEventFilter

        'UserStateTransitioned(uint256,uint256,uint256)'(
            epoch?: PromiseOrValue<BigNumberish> | null,
            hashedLeaf?: PromiseOrValue<BigNumberish> | null,
            proofIndex?: null
        ): UserStateTransitionedEventFilter
        UserStateTransitioned(
            epoch?: PromiseOrValue<BigNumberish> | null,
            hashedLeaf?: PromiseOrValue<BigNumberish> | null,
            proofIndex?: null
        ): UserStateTransitionedEventFilter
    }

    estimateGas: {
        airdropAmount(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        airdropEpochKey(
            input: UnirepTypes.SignUpProofStruct,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        attesterSignUp(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        attesterSignUpViaRelayer(
            attester: PromiseOrValue<string>,
            signature: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        attesters(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        attestingFee(overrides?: CallOverrides): Promise<BigNumber>

        beginEpochTransition(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        burnAttestingFee(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        collectEpochTransitionCompensation(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        collectedAttestingFee(overrides?: CallOverrides): Promise<BigNumber>

        currentEpoch(overrides?: CallOverrides): Promise<BigNumber>

        epochLength(overrides?: CallOverrides): Promise<BigNumber>

        epochTransitionCompensation(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getProofIndex(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        hasUserSignedUp(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        hashEpochKeyProof(
            input: UnirepTypes.EpochKeyProofStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        hashProcessAttestationsProof(
            outputBlindedUserState: PromiseOrValue<BigNumberish>,
            outputBlindedHashChain: PromiseOrValue<BigNumberish>,
            inputBlindedUserState: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<BigNumber>

        hashReputationProof(
            input: UnirepTypes.ReputationProofStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        hashSignUpProof(
            input: UnirepTypes.SignUpProofStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        hashStartTransitionProof(
            blindedUserState: PromiseOrValue<BigNumberish>,
            blindedHashChain: PromiseOrValue<BigNumberish>,
            globalStateTree: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<BigNumber>

        hashUserStateTransitionProof(
            input: UnirepTypes.UserTransitionProofStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        latestEpochTransitionTime(overrides?: CallOverrides): Promise<BigNumber>

        maxAttesters(overrides?: CallOverrides): Promise<BigNumber>

        maxEpochKey(overrides?: CallOverrides): Promise<BigNumber>

        maxReputationBudget(overrides?: CallOverrides): Promise<BigNumber>

        maxUsers(overrides?: CallOverrides): Promise<BigNumber>

        nextAttesterId(overrides?: CallOverrides): Promise<BigNumber>

        numEpochKeyNoncePerEpoch(overrides?: CallOverrides): Promise<BigNumber>

        numUserSignUps(overrides?: CallOverrides): Promise<BigNumber>

        processAttestations(
            outputBlindedUserState: PromiseOrValue<BigNumberish>,
            outputBlindedHashChain: PromiseOrValue<BigNumberish>,
            inputBlindedUserState: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setAirdropAmount(
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        spendReputation(
            input: UnirepTypes.ReputationProofStruct,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        startUserStateTransition(
            blindedUserState: PromiseOrValue<BigNumberish>,
            blindedHashChain: PromiseOrValue<BigNumberish>,
            globalStateTree: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        submitAttestation(
            attestation: UnirepTypes.AttestationStruct,
            epochKey: PromiseOrValue<BigNumberish>,
            toProofIndex: PromiseOrValue<BigNumberish>,
            fromProofIndex: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        submitAttestationViaRelayer(
            attester: PromiseOrValue<string>,
            signature: PromiseOrValue<BytesLike>,
            attestation: UnirepTypes.AttestationStruct,
            epochKey: PromiseOrValue<BigNumberish>,
            toProofIndex: PromiseOrValue<BigNumberish>,
            fromProofIndex: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        submitEpochKeyProof(
            input: UnirepTypes.EpochKeyProofStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        treeDepths(overrides?: CallOverrides): Promise<BigNumber>

        updateUserStateRoot(
            proof: UnirepTypes.UserTransitionProofStruct,
            proofIndexRecords: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        userSignUp(
            identityCommitment: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        verifyEpochKeyValidity(
            input: UnirepTypes.EpochKeyProofStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        verifyProcessAttestationProof(
            outputBlindedUserState: PromiseOrValue<BigNumberish>,
            outputBlindedHashChain: PromiseOrValue<BigNumberish>,
            inputBlindedUserState: PromiseOrValue<BigNumberish>,
            _proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<BigNumber>

        verifyReputation(
            input: UnirepTypes.ReputationProofStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        verifyStartTransitionProof(
            blindedUserState: PromiseOrValue<BigNumberish>,
            blindedHashChain: PromiseOrValue<BigNumberish>,
            GSTRoot: PromiseOrValue<BigNumberish>,
            _proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<BigNumber>

        verifyUserSignUp(
            input: UnirepTypes.SignUpProofStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        verifyUserStateTransition(
            input: UnirepTypes.UserTransitionProofStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>
    }

    populateTransaction: {
        airdropAmount(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        airdropEpochKey(
            input: UnirepTypes.SignUpProofStruct,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        attesterSignUp(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        attesterSignUpViaRelayer(
            attester: PromiseOrValue<string>,
            signature: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        attesters(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        attestingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

        beginEpochTransition(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        burnAttestingFee(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        collectEpochTransitionCompensation(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        collectedAttestingFee(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>

        epochLength(overrides?: CallOverrides): Promise<PopulatedTransaction>

        epochTransitionCompensation(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getProofIndex(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        hasUserSignedUp(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        hashEpochKeyProof(
            input: UnirepTypes.EpochKeyProofStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        hashProcessAttestationsProof(
            outputBlindedUserState: PromiseOrValue<BigNumberish>,
            outputBlindedHashChain: PromiseOrValue<BigNumberish>,
            inputBlindedUserState: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        hashReputationProof(
            input: UnirepTypes.ReputationProofStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        hashSignUpProof(
            input: UnirepTypes.SignUpProofStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        hashStartTransitionProof(
            blindedUserState: PromiseOrValue<BigNumberish>,
            blindedHashChain: PromiseOrValue<BigNumberish>,
            globalStateTree: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        hashUserStateTransitionProof(
            input: UnirepTypes.UserTransitionProofStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        latestEpochTransitionTime(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        maxAttesters(overrides?: CallOverrides): Promise<PopulatedTransaction>

        maxEpochKey(overrides?: CallOverrides): Promise<PopulatedTransaction>

        maxReputationBudget(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        maxUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>

        nextAttesterId(overrides?: CallOverrides): Promise<PopulatedTransaction>

        numEpochKeyNoncePerEpoch(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        numUserSignUps(overrides?: CallOverrides): Promise<PopulatedTransaction>

        processAttestations(
            outputBlindedUserState: PromiseOrValue<BigNumberish>,
            outputBlindedHashChain: PromiseOrValue<BigNumberish>,
            inputBlindedUserState: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setAirdropAmount(
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        spendReputation(
            input: UnirepTypes.ReputationProofStruct,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        startUserStateTransition(
            blindedUserState: PromiseOrValue<BigNumberish>,
            blindedHashChain: PromiseOrValue<BigNumberish>,
            globalStateTree: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        submitAttestation(
            attestation: UnirepTypes.AttestationStruct,
            epochKey: PromiseOrValue<BigNumberish>,
            toProofIndex: PromiseOrValue<BigNumberish>,
            fromProofIndex: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        submitAttestationViaRelayer(
            attester: PromiseOrValue<string>,
            signature: PromiseOrValue<BytesLike>,
            attestation: UnirepTypes.AttestationStruct,
            epochKey: PromiseOrValue<BigNumberish>,
            toProofIndex: PromiseOrValue<BigNumberish>,
            fromProofIndex: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        submitEpochKeyProof(
            input: UnirepTypes.EpochKeyProofStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        treeDepths(overrides?: CallOverrides): Promise<PopulatedTransaction>

        updateUserStateRoot(
            proof: UnirepTypes.UserTransitionProofStruct,
            proofIndexRecords: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        userSignUp(
            identityCommitment: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        verifyEpochKeyValidity(
            input: UnirepTypes.EpochKeyProofStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        verifyProcessAttestationProof(
            outputBlindedUserState: PromiseOrValue<BigNumberish>,
            outputBlindedHashChain: PromiseOrValue<BigNumberish>,
            inputBlindedUserState: PromiseOrValue<BigNumberish>,
            _proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        verifyReputation(
            input: UnirepTypes.ReputationProofStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        verifyStartTransitionProof(
            blindedUserState: PromiseOrValue<BigNumberish>,
            blindedHashChain: PromiseOrValue<BigNumberish>,
            GSTRoot: PromiseOrValue<BigNumberish>,
            _proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        verifyUserSignUp(
            input: UnirepTypes.SignUpProofStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        verifyUserStateTransition(
            input: UnirepTypes.UserTransitionProofStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>
    }
}
