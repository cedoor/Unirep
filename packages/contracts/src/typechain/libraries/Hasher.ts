/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue,
} from '../common'

export declare namespace UnirepTypes {
    export type EpochKeyProofStruct = {
        globalStateTree: PromiseOrValue<BigNumberish>
        epoch: PromiseOrValue<BigNumberish>
        epochKey: PromiseOrValue<BigNumberish>
        proof: PromiseOrValue<BigNumberish>[]
    }

    export type EpochKeyProofStructOutput = [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
    ] & {
        globalStateTree: BigNumber
        epoch: BigNumber
        epochKey: BigNumber
        proof: BigNumber[]
    }

    export type ReputationProofStruct = {
        repNullifiers: PromiseOrValue<BigNumberish>[]
        epoch: PromiseOrValue<BigNumberish>
        epochKey: PromiseOrValue<BigNumberish>
        globalStateTree: PromiseOrValue<BigNumberish>
        attesterId: PromiseOrValue<BigNumberish>
        proveReputationAmount: PromiseOrValue<BigNumberish>
        minRep: PromiseOrValue<BigNumberish>
        proveGraffiti: PromiseOrValue<BigNumberish>
        graffitiPreImage: PromiseOrValue<BigNumberish>
        proof: PromiseOrValue<BigNumberish>[]
    }

    export type ReputationProofStructOutput = [
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
    ] & {
        repNullifiers: BigNumber[]
        epoch: BigNumber
        epochKey: BigNumber
        globalStateTree: BigNumber
        attesterId: BigNumber
        proveReputationAmount: BigNumber
        minRep: BigNumber
        proveGraffiti: BigNumber
        graffitiPreImage: BigNumber
        proof: BigNumber[]
    }

    export type SignUpProofStruct = {
        epoch: PromiseOrValue<BigNumberish>
        epochKey: PromiseOrValue<BigNumberish>
        globalStateTree: PromiseOrValue<BigNumberish>
        attesterId: PromiseOrValue<BigNumberish>
        userHasSignedUp: PromiseOrValue<BigNumberish>
        proof: PromiseOrValue<BigNumberish>[]
    }

    export type SignUpProofStructOutput = [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
    ] & {
        epoch: BigNumber
        epochKey: BigNumber
        globalStateTree: BigNumber
        attesterId: BigNumber
        userHasSignedUp: BigNumber
        proof: BigNumber[]
    }

    export type UserTransitionProofStruct = {
        newGlobalStateTreeLeaf: PromiseOrValue<BigNumberish>
        epkNullifiers: PromiseOrValue<BigNumberish>[]
        transitionFromEpoch: PromiseOrValue<BigNumberish>
        blindedUserStates: PromiseOrValue<BigNumberish>[]
        fromGlobalStateTree: PromiseOrValue<BigNumberish>
        blindedHashChains: PromiseOrValue<BigNumberish>[]
        fromEpochTree: PromiseOrValue<BigNumberish>
        proof: PromiseOrValue<BigNumberish>[]
    }

    export type UserTransitionProofStructOutput = [
        BigNumber,
        BigNumber[],
        BigNumber,
        BigNumber[],
        BigNumber,
        BigNumber[],
        BigNumber,
        BigNumber[]
    ] & {
        newGlobalStateTreeLeaf: BigNumber
        epkNullifiers: BigNumber[]
        transitionFromEpoch: BigNumber
        blindedUserStates: BigNumber[]
        fromGlobalStateTree: BigNumber
        blindedHashChains: BigNumber[]
        fromEpochTree: BigNumber
        proof: BigNumber[]
    }
}

export interface HasherInterface extends utils.Interface {
    functions: {
        'hashEpochKeyProof((uint256,uint256,uint256,uint256[8]))': FunctionFragment
        'hashProcessAttestationsProof(uint256,uint256,uint256,uint256[8])': FunctionFragment
        'hashReputationProof((uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[8]))': FunctionFragment
        'hashSignUpProof((uint256,uint256,uint256,uint256,uint256,uint256[8]))': FunctionFragment
        'hashStartTransitionProof(uint256,uint256,uint256,uint256[8])': FunctionFragment
        'hashUserStateTransitionProof((uint256,uint256[],uint256,uint256[],uint256,uint256[],uint256,uint256[8]))': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'hashEpochKeyProof'
            | 'hashProcessAttestationsProof'
            | 'hashReputationProof'
            | 'hashSignUpProof'
            | 'hashStartTransitionProof'
            | 'hashUserStateTransitionProof'
    ): FunctionFragment

    encodeFunctionData(
        functionFragment: 'hashEpochKeyProof',
        values: [UnirepTypes.EpochKeyProofStruct]
    ): string
    encodeFunctionData(
        functionFragment: 'hashProcessAttestationsProof',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>[]
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'hashReputationProof',
        values: [UnirepTypes.ReputationProofStruct]
    ): string
    encodeFunctionData(
        functionFragment: 'hashSignUpProof',
        values: [UnirepTypes.SignUpProofStruct]
    ): string
    encodeFunctionData(
        functionFragment: 'hashStartTransitionProof',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>[]
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'hashUserStateTransitionProof',
        values: [UnirepTypes.UserTransitionProofStruct]
    ): string

    decodeFunctionResult(
        functionFragment: 'hashEpochKeyProof',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'hashProcessAttestationsProof',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'hashReputationProof',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'hashSignUpProof',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'hashStartTransitionProof',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'hashUserStateTransitionProof',
        data: BytesLike
    ): Result

    events: {}
}

export interface Hasher extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: HasherInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        hashEpochKeyProof(
            input: UnirepTypes.EpochKeyProofStruct,
            overrides?: CallOverrides
        ): Promise<[string]>

        hashProcessAttestationsProof(
            outputBlindedUserState: PromiseOrValue<BigNumberish>,
            outputBlindedHashChain: PromiseOrValue<BigNumberish>,
            inputBlindedUserState: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<[string]>

        hashReputationProof(
            input: UnirepTypes.ReputationProofStruct,
            overrides?: CallOverrides
        ): Promise<[string]>

        hashSignUpProof(
            input: UnirepTypes.SignUpProofStruct,
            overrides?: CallOverrides
        ): Promise<[string]>

        hashStartTransitionProof(
            blindedUserState: PromiseOrValue<BigNumberish>,
            blindedHashChain: PromiseOrValue<BigNumberish>,
            globalStateTree: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<[string]>

        hashUserStateTransitionProof(
            input: UnirepTypes.UserTransitionProofStruct,
            overrides?: CallOverrides
        ): Promise<[string]>
    }

    hashEpochKeyProof(
        input: UnirepTypes.EpochKeyProofStruct,
        overrides?: CallOverrides
    ): Promise<string>

    hashProcessAttestationsProof(
        outputBlindedUserState: PromiseOrValue<BigNumberish>,
        outputBlindedHashChain: PromiseOrValue<BigNumberish>,
        inputBlindedUserState: PromiseOrValue<BigNumberish>,
        proof: PromiseOrValue<BigNumberish>[],
        overrides?: CallOverrides
    ): Promise<string>

    hashReputationProof(
        input: UnirepTypes.ReputationProofStruct,
        overrides?: CallOverrides
    ): Promise<string>

    hashSignUpProof(
        input: UnirepTypes.SignUpProofStruct,
        overrides?: CallOverrides
    ): Promise<string>

    hashStartTransitionProof(
        blindedUserState: PromiseOrValue<BigNumberish>,
        blindedHashChain: PromiseOrValue<BigNumberish>,
        globalStateTree: PromiseOrValue<BigNumberish>,
        proof: PromiseOrValue<BigNumberish>[],
        overrides?: CallOverrides
    ): Promise<string>

    hashUserStateTransitionProof(
        input: UnirepTypes.UserTransitionProofStruct,
        overrides?: CallOverrides
    ): Promise<string>

    callStatic: {
        hashEpochKeyProof(
            input: UnirepTypes.EpochKeyProofStruct,
            overrides?: CallOverrides
        ): Promise<string>

        hashProcessAttestationsProof(
            outputBlindedUserState: PromiseOrValue<BigNumberish>,
            outputBlindedHashChain: PromiseOrValue<BigNumberish>,
            inputBlindedUserState: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<string>

        hashReputationProof(
            input: UnirepTypes.ReputationProofStruct,
            overrides?: CallOverrides
        ): Promise<string>

        hashSignUpProof(
            input: UnirepTypes.SignUpProofStruct,
            overrides?: CallOverrides
        ): Promise<string>

        hashStartTransitionProof(
            blindedUserState: PromiseOrValue<BigNumberish>,
            blindedHashChain: PromiseOrValue<BigNumberish>,
            globalStateTree: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<string>

        hashUserStateTransitionProof(
            input: UnirepTypes.UserTransitionProofStruct,
            overrides?: CallOverrides
        ): Promise<string>
    }

    filters: {}

    estimateGas: {
        hashEpochKeyProof(
            input: UnirepTypes.EpochKeyProofStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        hashProcessAttestationsProof(
            outputBlindedUserState: PromiseOrValue<BigNumberish>,
            outputBlindedHashChain: PromiseOrValue<BigNumberish>,
            inputBlindedUserState: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<BigNumber>

        hashReputationProof(
            input: UnirepTypes.ReputationProofStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        hashSignUpProof(
            input: UnirepTypes.SignUpProofStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        hashStartTransitionProof(
            blindedUserState: PromiseOrValue<BigNumberish>,
            blindedHashChain: PromiseOrValue<BigNumberish>,
            globalStateTree: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<BigNumber>

        hashUserStateTransitionProof(
            input: UnirepTypes.UserTransitionProofStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>
    }

    populateTransaction: {
        hashEpochKeyProof(
            input: UnirepTypes.EpochKeyProofStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        hashProcessAttestationsProof(
            outputBlindedUserState: PromiseOrValue<BigNumberish>,
            outputBlindedHashChain: PromiseOrValue<BigNumberish>,
            inputBlindedUserState: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        hashReputationProof(
            input: UnirepTypes.ReputationProofStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        hashSignUpProof(
            input: UnirepTypes.SignUpProofStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        hashStartTransitionProof(
            blindedUserState: PromiseOrValue<BigNumberish>,
            blindedHashChain: PromiseOrValue<BigNumberish>,
            globalStateTree: PromiseOrValue<BigNumberish>,
            proof: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        hashUserStateTransitionProof(
            input: UnirepTypes.UserTransitionProofStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>
    }
}
